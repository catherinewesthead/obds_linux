---
title: "Solution: ggplot2"
author: "Kevin Rue-Albrecht"
date: "14/10/2024"
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggrepel)
library(cowplot)
library(patchwork)
library(gridExtra)
```

# Exercise

Use `library(ggplot2)` to load the package.

```{r}
library(ggplot2)
```

## Specify the dataset.

What does `ggplot(diamonds)` do?

```{r}
ggplot(diamonds)
```

> Answer: Plots a grey rectangle 

## Add the aesthetics.

What does `ggplot(diamonds, aes(x = carat, y = price))` do?

```{r}
ggplot(diamonds, aes(x = carat, y = price))
```

> Answer:

## Add geometric objects

- Add data points showing `carat` on the x-axis and `price` on the y-axis.

```{r}
help(ggplot2)
```


```{r}
ggplot(diamonds, 
       aes(x = carat, y = price))+ geom_point()
  
```

- Color data points by `cut`.
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(diamonds, 
       aes(x = carat, y = price, color = cut))+ 
  geom_point() 
  
```

- Add a smoothed mean trend line.
  (Copy-paste and extend the code chunk above.)

```{r}

ggplot(diamonds, 
       aes(x = carat, y = price, color = cut))+ 
  geom_point() + 
  geom_smooth()

```

- Assign that last plot to an object called `obds_diamonds`.

```{r}

obds_diamonds <- ggplot(diamonds, 
       aes(x = carat, y = price, color = cut))+ 
  geom_point() + 
  geom_smooth()

```


# Exercise

Predict the difference between these two plots

### Plot 1

```{r}
#| include: true
ggplot(diamonds, aes(x = carat, y = price, colour = cut)) +
  geom_point() +
  geom_smooth()
```

### Plot 2

```{r}
#| include: true
ggplot(diamonds, aes(x = carat, y = price)) +
  geom_point(aes(colour = cut)) +
  geom_smooth()
```

> Answer:The colour applies to all of the sections if it is included in the first line of code. This is why in the second plot there is only one smooth line, as the colour section is only included in the geom_point.

##Looking at theme commands
```{r}
help("theme")
```


# Exercise

## Trend lines

Using the `ChickWeight` data set:

- Create a scatter plot of weight (y-axis) over time (x-axis).

# Understanding the Chickweight data set
```{r}
help("ChickWeight")
```

```{r}
ggplot(ChickWeight, aes(x = Time, y = weight)) + 
geom_point()

```

- Color by diet.
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(ChickWeight, aes(x = Time, y = weight)) + 
geom_point(aes(color = Diet))

```

- Add a linear mean trend line for each diet.
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(ChickWeight, aes(x = Time, y = weight)) + 
geom_point(aes(color = Diet)) +
geom_smooth(aes(color = Diet), method = "lm")


```

At this point you should be able to visually identify
the diet that leads to the highest mean increase in weight.

> Answer:Diet 3

- Facet a ribbon of sub-plots, one per diet.
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(ChickWeight, aes(x = Time, y = weight)) + 
geom_point(aes(color = Diet)) +
geom_smooth(aes(color = Diet), method = "lm") +
facet_wrap(~Diet, nrow = 1)




```

- Assign that last plot to an object called `obds_chickweight`.

```{r}

obds_chickweight <- ggplot(ChickWeight, aes(x = Time, y = weight)) + 
geom_point(aes(color = Diet)) +
geom_smooth(aes(color = Diet), method = "lm") +
facet_wrap(~Diet, nrow = 1)


```

# Exercise

## Bar plot

- Load the `ggplot2::msleep` data set.

```{r}
data("msleep")
head(msleep)
```

- Draw a bar plot of number of observations (i.e., rows) for each taxonomic order
  (i.e, one plot and one bar per taxonomic order).

```{r}
ggplot(msleep, aes (order))+
  geom_bar()

```

- Change the angle and font size of the text for the x-axis ticks (not the axis titles).
  Justify the text of those x-axis ticks as right-aligned.
  (Copy-paste and extend the code chunk above.)

```{r}

ggplot(msleep, aes (order))+
geom_bar() +
theme(
axis.text.x = element_text(size = 8, angle = 90, vjust =0.5)
)



```

- Change the value and font size of the title for both x and y axes.
  (Copy-paste and extend the code chunk above.)

```{r}

ggplot(msleep, aes (order))+
geom_bar() +
labs(
  x = "Animal Order",
  y = "Count"
) +
theme(
axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5),
axis.text.y = element_text(size = 8), axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10)
)

```

- Fill each bar with colors, proportionally to the count of each genus.
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(msleep, aes (order))+
geom_bar(aes(fill = genus)) +
labs(
  x = "Animal Order",
  y = "Count"
) +
theme(
axis.text.x = element_text(size = 8, angle = 90, vjust = 1),
axis.text.y = element_text(size = 8), axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10)
)






```

From this point onwards, you may need to iteratively resize the text of the ticks and axes for readability.

- Reduce the legend key size.
  (Recommendation: use `unit(2, "mm")`).
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(msleep, aes (x = order))+
geom_bar(aes(fill = genus)) +
labs(
  x = "Animal Order",
  y = "Count"
) +
theme(
axis.text.x = element_text(size = 8, angle = 90, vjust = 1),
axis.text.y = element_text(size = 8), axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.text = element_text(size = 6), 
legend.key.size = unit(2, "mm")
)







```

- Force the legend to be display in 3 columns.
  (Recommendation: use `guide_legend(...)`).
  (Copy-paste and extend the code chunk above.)

```{r}
ggplot(msleep, aes (x = order))+
geom_bar(aes(fill = genus)) +
labs(
  x = "Animal Order",
  y = "Count"
) +
theme(
axis.text.x = element_text(size = 8, angle = 90, vjust = 1),
axis.text.y = element_text(size = 8), axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.text = element_text(size = 6), 
legend.key.size = unit(2, "mm")
) +
guides(
  fill = guide_legend(ncol = 3)
)









```

- Add a contour of thin black lines to the bars.

```{r}
ggplot(msleep, aes (x = order))+
geom_bar(aes(fill = genus), color = "black", linewidth = 0.2) +
labs(
  x = "Animal Order",
  y = "Count"
) +
theme(
axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 8), axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.text = element_text(size = 6), 
legend.key.size = unit(2, "mm")
) +
guides(
  fill = guide_legend(ncol = 3)
)









```

- Assign that last plot to an object called `obds_msleep`.

```{r}
obds_msleep <- ggplot(msleep, aes (x = order))+
geom_bar(aes(fill = genus), color = "black", linewidth = 0.2) +
labs(
  x = "Animal Order",
  y = "Count"
) +
theme(
axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 8), axis.title.x = element_text(size = 10), axis.title.y = element_text(size = 10),
legend.text = element_text(size = 6), 
legend.key.size = unit(2, "mm")
) +
guides(
  fill = guide_legend(ncol = 3)
)


```

# Exercise

## Plotting grid

- Collate the plots that we assigend to objects through the day, as a single plot.

  + Plots: `obds_diamonds`, `obds_chickweight`, `obds_msleep`.
  
  + Methods: `cowplot::plot_grid()`, `patchwork`, `gridExtra::grid.arrange()`.

Using `cowplot`.

```{r}
#| fig-width: 12
#| fig-height: 14
library(cowplot)
first_row <- cowplot::plot_grid(obds_chickweight, obds_diamonds, labels = c("Chick Weights", "Diamonds", ncol = 2, nrow = 1)
  
  
)
second_row <- cowplot::plot_grid(obds_msleep, labels = "Animals", ncol = 1, nrow = 1)
  

super_plot <- cowplot::plot_grid(first_row, second_row, ncol = 1, nrow = 2, rel_heights = c(1.0, 1.2))
  
  

super_plot
```

```{r}
#| fig-width: 12
#| fig-height: 12
library(cowplot)
cowplot::plot_grid(obds_chickweight, obds_diamonds, obds_msleep, labels = c("A", "B", "C"), ncol = 2, nrow = 2)
```


Using `patchwork`.

```{r}
#| fig-width: 12
#| fig-height: 12
library(patchwork)
(obds_chickweight + obds_diamonds) / obds_msleep

```

Using `gridExtra`.

```{r}
#| fig-width: 12
#| fig-height: 14
library(gridExtra)
gridExtra::grid.arrange(first_row, second_row, ncol = 1, nrow = 2)




```

```{r}
#| fig-width: 12
#| fig-height: 12
library(patchwork)
(obds_chickweight + obds_diamonds) / obds_msleep

```
```
```{r}

```


- Export the new plot in a PDF file, and open it in a PDF viewer (e.g. Adobe Acrobat Reader DC).

You will likely need a few attempts to fine-tune the width and height of the output file.


```{r}

```


```


```


```

# Exercise

```{r}
ggsave(
"plots_day4r.pdf", 
plot = last_plot(),
width = 15,
height = 8,
units = "in")
```

## Exploring chatgpt option

```{r}
#| fig-width: 12
#| fig-height: 14
library(cowplot)
library(ggplot2)

# Create consistent panels with legends removed
p1n <- obds_chickweight + theme_minimal(base_size = 11) + theme(legend.position = "none", plot.margin = margin(5,5,5,5))
p2n <- obds_diamonds    + theme_minimal(base_size = 11) + theme(legend.position = "none", plot.margin = margin(5,5,5,5))
p3n <- obds_msleep      + theme_minimal(base_size = 11) + theme(legend.position = "none", plot.margin = margin(5,5,5,5))

# extract a single legend from one plot (customize legend.theme if needed)
shared_legend <- cowplot::get_legend(
  obds_msleep + theme_minimal(base_size = 11) +
    theme(legend.position = "bottom",
          legend.key.size = unit(3, "mm"),
          legend.text = element_text(size = 7))
)

first_row  <- cowplot::plot_grid(p1n, p2n, labels = c("A", "B"), ncol = 2, align = "hv")
second_row <- cowplot::plot_grid(p3n, labels = "C", ncol = 1)

panel_grid <- cowplot::plot_grid(first_row, second_row, ncol = 1, rel_heights = c(1, 1.2), align = "v")

# stack panels over the shared legend
super_plot <- cowplot::plot_grid(panel_grid, shared_legend, ncol = 1, rel_heights = c(1, 0.12))

print(super_plot)

```



## Pair programming

- Explore the data set `ggplot2::mpg` and generate the most informative plot that you can!

```{r}


```
